#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include <cctype>
#include <exception>
#include <fstream>

using namespace std;

ifstream fin("input.txt");
ofstream fout("output.txt");

class MyException : public exception {
public:
    explicit MyException(string ss) : s(std::move(ss)) {}
    ~MyException() noexcept override = default;

    const char* what() const noexcept override {
        return s.c_str();
    }

private:
    string s;
};

enum TokenType {
    NUMBER, VARIABLE, ADD, SUB, MUL, DIV, L_BR, R_BR
};

struct Token {
    TokenType type;
    union {
        double num;
        char variable;
    };
    string str;
};

// Классы

class Expression {
public:
    virtual Expression* diff(char) = 0;
    virtual void print() = 0;
    virtual void print(ofstream&) = 0;

    virtual Expression* simplify() = 0;
    virtual Expression* clone() = 0;

    virtual ~Expression() = default;
};

class Number : public Expression {
public:
    Number() : num(0.0) {}
    explicit Number(const double& n) {
        num = n;
    }
    ~Number() override = default;

    Expression* diff(char _) override {
        return new Number(0.0);
    }

    int val() {
        return num;
    }

    void print() override {
        cout << num;
    }
    void print(ofstream& out) override {
        out << num;
    }

    Expression* simplify() override {
        return new Number(num);
    }

    Expression* clone() override {
        return new Number(num);
    }

private:
    int num;
};

class Variable : public Expression {
public:
    Variable() : var('x') {}
    explicit Variable(char const var) : var(var) {}
    ~Variable() override = default;

    void print() override {
        cout << var;
    }

    void print(ofstream& ofstream1) override {
        ofstream1 << var;
    }

    Expression* diff(char ch) override {
        return new Number((ch == var) ? 1. : 0.);
    }

    Expression* simplify() override {
        return new Variable(var);
    }

    Expression* clone() override {
        return new Variable(var);
    }

public:
    char var;
};

class Add : public Expression {
public:
    Add(Expression* left, Expression* right) : left(left), right(right) {}
    ~Add() override {
        delete left;
        delete right;
    }

    Expression* diff(char ch) override {
        return new Add(left->diff(ch), right->diff(ch));
    }
    void print() override {
        cout << "(";
        left->print();
        cout << "+";
        right->print();
        cout << ")";
    }
    void print(ofstream& ofstream1) override {
        ofstream1 << "(";
        left->print(ofstream1);
        ofstream1 << "+";
        right->print(ofstream1);
        ofstream1 << ")";
    }

    Expression* simplify() override {
        Expression* new_l = left->simplify();
        Expression* new_r = right->simplify();

        bool lb = false;
        bool rb = false;

        Number* l = dynamic_cast<Number*>(new_l);
        Number* r = dynamic_cast<Number*>(new_r);

        if (l && !l->val()) lb = true;
        if (r && !r->val()) rb = true;

        if (l && r) {
            Expression* expression = new Number(l->val() + r->val());
            delete new_l;
            delete new_r;
            return expression;
        }

        if (lb & rb) {
            delete new_l;
            delete new_r;
            return new Number(0.);
        }

        if (lb) {
            delete new_l;
            return new_r;
        }

        if (rb) {
            delete new_r;
            return new_l;
        }

        return new Add(new_l, new_r);
    }

    Expression* clone() override {
        return new Add(left->clone(), right->clone());
    }

private:
    Expression* left;
    Expression* right;
};


class Mul : public Expression {
public:
    Mul(Expression* left, Expression* right) : left(left), right(right) {}
    ~Mul() override {
        delete left;
        delete right;
    }
    Expression* diff(char ch) override {
        return new Add(new Mul(left->diff(ch), right), new Mul(left, right->diff(ch)));
    }
    void print() override {
        cout << "(";
        left->print();
        cout << "*";
        right->print();
        cout << ")";
    }

    void print(ofstream& ofstream1) override {
        ofstream1 << "(";
        left->print(ofstream1);
        ofstream1 << "*";
        right->print(ofstream1);
        ofstream1 << ")";
    }

    Expression* simplify() override {
        Expression* new_l = this->left->simplify();
        Expression* new_r = this->right->simplify();

        bool lb = false, rb = false, lb1 = false, rb1 = false;

        Number* l = dynamic_cast<Number*>(new_l);
        Number* r = dynamic_cast<Number*>(new_r);

        if (l && r) {
            Expression* expression = new Number(l->val() * r->val());
            delete new_l;
            delete new_r;
            return expression;
        }

        if (l) {
            if (!l->val()) lb = true;
            else if (l->val() == 1.) lb1 = true;
        }

        if (r) {
            if (!r->val()) rb = true;
            else if (r->val() == 1.) rb1 = true;
        }


        if (lb || rb) {
            delete new_l;
            delete new_r;
            return new Number(0.);
        }

        if (lb1) {
            delete new_l;
            return new_r;
        }

        if (rb1) {
            delete new_r;
            return new_l;
        }

        return new Mul(new_l, new_r);
    }

    Expression* clone() override {
        return new Mul(left->clone(), right->clone());
    }

private:
    Expression* left;
    Expression* right;
};

class Znak_Minus : public Expression {
public:
    explicit Znak_Minus(Expression* expression) : val(expression) {}

    ~Znak_Minus() override {
        delete val;
    }

    Expression* diff(char ch) override {
        return new Znak_Minus(val->diff(ch));
    }

    void print() override {
        cout << "-";
        val->print();
    }

    void print(ofstream& ofstream1) override {
        ofstream1 << "-";
        val->print(ofstream1);
    }

    Expression* simplify() override {
        Expression* val = this->val->simplify();

        if (Znak_Minus* minus = dynamic_cast<Znak_Minus*>(val)) {
            Expression* expression = minus->val->clone();
            delete val;
            return expression;
        }

        if (Number* number = dynamic_cast<Number*>(val)) {
            Expression* expression = new Number(-(number->val()));
            delete val;
            return expression;
        }
        return new Znak_Minus(val);
    }

    Expression* clone() override {
        return new Znak_Minus(val->clone());
    }

private:
    Expression* val;
};

class Sub : public Expression {
public:
    Sub(Expression* left, Expression* right) : left(left), right(right) {}
    ~Sub() override {
        delete left;
        delete right;
    }

    Expression* diff(char ch) override {
        return new Sub(left->diff(ch), right->diff(ch));
    }
    void print() override {
        cout << "(";
        left->print();
        cout << "-";
        right->print();
        cout << ")";
    }

    void print(ofstream& ofstream1) override {
        ofstream1 << "(";
        left->print(ofstream1);
        ofstream1 << "-";
        right->print(ofstream1);
        ofstream1 << ")";
    }

    Expression* simplify() override {
        Expression* new_l = left->simplify();
        Expression* new_r = right->simplify();

        bool rb = false, lb = false;
        Number* l = dynamic_cast<Number*>(new_l);
        Number* r = dynamic_cast<Number*>(new_r);

        if (l && r) {
            Expression* exp = new Number(l->val() + r->val());
            delete new_l;
            delete new_r;
            return exp;
        }

        if (l && !l->val()) lb = true;
        if (r && !r->val()) rb = true;

        if (lb & rb) {
            delete new_l;
            delete new_r;
            return new Number(0.);
        }

        if (lb) {
            delete new_l;
            return new Znak_Minus(new_r);
        }
        if (rb) {
            delete new_r;
            return new_l;
        }
        return new Sub(new_l, new_r);
    }

    Expression* clone() override {
        return new Sub(left->clone(), right->clone());
    }

private:
    Expression* left;
    Expression* right;
};

class Div: public Expression {
public:
    Div(Expression* left, Expression* right) : left(left), right(right) {}
    ~Div() override {
        delete left;
        delete right;
    }
    Expression* diff(char ch) override {
        return new Div(
            new Sub(new Mul(left->diff(ch), right), new Mul(left, right->diff(ch))),
            new Mul(right, right)
        );
    }
    void print() override {
        cout << "(";
        left->print();
        cout << "/";
        right->print();
        cout << ")";
    }

    void print(ofstream& ofstream1) override {
        ofstream1 << "(";
        left->print(ofstream1);
        ofstream1 << "/";
        right->print(ofstream1);
        ofstream1 << ")";
    }

    Expression* simplify() override {
        Expression* new_l = this->left->simplify();
        Expression* new_r = this->right->simplify();

        bool lb = false, rb = false;

        Number* l = dynamic_cast<Number*>(new_l);
        Number* r = dynamic_cast<Number*>(new_r);

        if (l && r) {
            Expression* expression = new Number(l->val() / r->val());
            delete new_l;
            delete new_r;
            return expression;
        }

        if (l && !l->val()) lb = true;
        if (r && !r->val()) rb = true;

        if (lb) {
            delete new_l;
            delete new_r;
            return new Number(0.);
        }
        if (rb) {
            delete new_r;
            return new_l;
        }
        return new Div(new_l, new_r);
    }

    Expression* clone() override {
        return new Div(left->clone(), right->clone());
    }

private:
    Expression* left;
    Expression* right;
};


//Парсинг
void skip_whitespace(string& str, int& pos) {
    while (isspace(str[pos]) && pos < str.length())
        ++pos;
}

vector<Token> size_of_token(string& str) {
    vector<Token> tokens;
    int pos = 0;
    int const len = str.length();
    while (pos < len) {
        skip_whitespace(str, pos);

        Token token;

        if (isalpha(str[pos])) {
            char var = str[pos];

            if (pos + 1 == len || !isalpha(str[pos + 1])) {
                token.type = VARIABLE;
                token.variable = var;
                token.str = var;
                tokens.push_back(token);
                ++pos;
            }
        }
        else if (isdigit(str[pos]) || (str[pos] == '.' && pos + 1 < len && isdigit(str[pos + 1]))) {
            string num;
            num += str[pos++];
            bool found_token = false;
            while (isdigit(str[pos]) || str[pos] == '.') {
                if (str[pos] == '.') {
                    if (!found_token) {
                        found_token = true;
                    }
                    else {
                        throw MyException("too many points in number");
                    }
                }
                num += str[pos++];
            }
            token.type = NUMBER;
            token.num = stod(num); // basic_string
            token.str = num;
            tokens.push_back(token);
        }
        else {
            switch (str[pos]) {
            case '+': {
                token.type = ADD;
                token.str = "+";
                break;
            }
            case '-': {
                token.type = SUB;
                token.str = "-";
                break;
            }
            case '*': {
                token.type = MUL;
                token.str = "*";
                break;
            }
            case '/': {
                token.type = DIV;
                token.str = "/";
                break;
            }
            case '(': {
                token.type = L_BR;
                token.str = "(";
                break;
            }
            case ')': {
                token.type = R_BR;
                token.str = ")";
                break;
            }
            default: {
                throw MyException("unexppected character");
            }
            }
            tokens.push_back(token);
            ++pos;
        }
    }
    return tokens;
}

inline int pred(const Token& token) {
    if (token.type == NUMBER || token.type == VARIABLE) return 0;
    if (token.type == L_BR || token.type == R_BR) return 1;
    if (token.type == ADD || token.type == SUB || token.type == MUL) return 3;
    return 2;
}

int highest_pred_token(vector<Token>& tokens, int begin, int stop) {
    int prec = -1;
    int indx = 0;
    int brackets = 0;
    for (int i = begin; i < stop; i++) {
        int p = pred(tokens[i]);
        if (p > prec || (p == prec && p > 1)) {
            prec = p;
            indx = i;
        }
        if (tokens[i].type == L_BR) {
            brackets = 1;
            ++i;
            while (brackets > 0 && i < stop) {
                if (tokens[i].type == L_BR) {
                    ++brackets;
                }
                if (tokens[i].type == R_BR) {
                    --brackets;
                }
                i++;
            }
            if (brackets > 0) {
                throw MyException("brackets are unbalanced");
            }
            i--;
        }
    }
    return indx;
}

int bracket_themost_close(vector<Token>& tokens, int start, int stop) {
    int position = start + 1;
    int brac = 1;
    while (brac && position < stop) {
        if (tokens[position].type == L_BR) {
            brac++;
        }
        if (tokens[position].type == R_BR) {
            brac--;
        }
        position++;
    }
    if (brac > 0) {
        throw MyException("unbalanced brackets");
    }
    position--;
    return position;
}

Expression* exp_build(vector<Token>& tokens, int start, int stop) {
    if (stop - start == 1) {
        Token& token = tokens[start];
        if (token.type == VARIABLE) {
            return new Variable(token.variable);
        }
        if (token.type == NUMBER) {
            return new Number(token.num);
        }
        throw MyException("unexpected single token");
    }
    int index = highest_pred_token(tokens, start, stop);
    Token& token = tokens[index];

    if (index == start) {
        if (token.type == SUB) {
            return new Znak_Minus(exp_build(tokens, start + 1, stop));
        }
        else if (token.type == L_BR) {
            int close_bracket = bracket_themost_close(tokens, index, stop);
            if (close_bracket != stop - 1) {
                throw MyException("brackets are not balanced");
            }
            return exp_build(tokens, index + 1, close_bracket);
        }
        throw MyException("unexpected token with start index");
    }

    Expression* left = exp_build(tokens, start, index);
    Expression* right = exp_build(tokens, index + 1, stop);

    if (token.type == ADD) {
        return new Add(left, right);
    }
    if (token.type == SUB) {
        return new Sub(left, right);
    }
    if (token.type == MUL) {
        return new Mul(left, right);
    }
    if (token.type == DIV) {
        return new Div(left, right);
    }

    throw MyException("token is unexpected");

}

Expression* exp_build(vector<Token> tokens) {
    return exp_build(tokens, 0, tokens.size());
}

Expression* exp_parse(string str) {
    return exp_build(size_of_token(str));
}

int main() {
    string str;
    getline(fin, str);
    try {
        Expression* expression = exp_parse(str);
        expression->diff('x')->print(fout);
    }
    catch (MyException myException) {
        cout << myException.what();
    }
    return 0;
}
